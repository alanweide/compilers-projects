
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\004\000\002\011\003\000\002\012\006\000" +
    "\002\012\005\000\002\012\005\000\002\012\004\000\002" +
    "\013\007\000\002\014\004\000\002\014\003\000\002\015" +
    "\003\000\002\015\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\005\000\002\017\007\000" +
    "\002\017\011\000\002\017\013\000\002\020\004\000\002" +
    "\020\005\000\002\021\003\000\002\021\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\003\000\002\023\005\000\002\024" +
    "\003\000\002\024\005\000\002\025\003\000\002\025\005" +
    "\000\002\026\003\000\002\026\005\000\002\027\003\000" +
    "\002\027\005\000\002\030\003\000\002\030\005\000\002" +
    "\030\005\000\002\031\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\032\003" +
    "\000\002\032\005\000\002\032\005\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\034\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\035" +
    "\003\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\006\000\002\036\003\000" +
    "\002\036\006\000\002\036\004\000\002\036\004\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\012\014\011\020\014\025\004\026\006\001" +
    "\002\000\010\052\uffef\071\uffef\131\uffef\001\002\000\012" +
    "\014\ufffd\020\ufffd\025\ufffd\026\ufffd\001\002\000\010\052" +
    "\ufff0\071\ufff0\131\ufff0\001\002\000\004\002\253\001\002" +
    "\000\004\002\uffff\001\002\000\010\052\ufff2\071\ufff2\131" +
    "\ufff2\001\002\000\006\071\021\131\024\001\002\000\012" +
    "\014\011\020\014\025\004\026\006\001\002\000\010\052" +
    "\ufff1\071\ufff1\131\ufff1\001\002\000\004\002\001\001\002" +
    "\000\012\014\ufffe\020\ufffe\025\ufffe\026\ufffe\001\002\000" +
    "\006\071\250\131\251\001\002\000\010\057\ufff9\060\ufff9" +
    "\062\246\001\002\000\006\071\uffed\131\uffed\001\002\000" +
    "\006\057\243\060\242\001\002\000\006\057\ufff8\060\ufff8" +
    "\001\002\000\014\051\027\055\026\057\ufff4\060\ufff4\062" +
    "\ufff4\001\002\000\012\055\236\057\ufff5\060\ufff5\062\ufff5" +
    "\001\002\000\006\056\233\127\234\001\002\000\004\052" +
    "\030\001\002\000\004\053\031\001\002\000\056\013\076" +
    "\014\011\020\014\021\043\025\004\026\006\031\060\034" +
    "\050\045\067\051\037\053\031\065\034\066\052\067\044" +
    "\071\045\073\057\074\072\075\073\076\046\127\100\130" +
    "\066\131\077\001\002\000\004\002\uffe8\001\002\000\030" +
    "\052\uffc5\056\uffc5\057\uffc5\060\uffc5\074\uffc5\104\122\105" +
    "\123\106\uffc5\107\uffc5\110\uffc5\111\uffc5\001\002\000\034" +
    "\034\050\051\037\065\034\066\052\067\044\071\045\073" +
    "\057\074\072\075\073\076\046\127\100\130\066\131\077" +
    "\001\002\000\034\034\050\051\037\065\034\066\052\067" +
    "\044\071\045\073\057\074\072\075\073\076\046\127\100" +
    "\130\066\131\077\001\002\000\044\052\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\063\uffc0\064\uffc0\074\uffc0\100\133\101\132" +
    "\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110" +
    "\uffc0\111\uffc0\001\002\000\034\034\050\051\037\065\034" +
    "\066\052\067\044\071\045\073\057\074\072\075\073\076" +
    "\046\127\100\130\066\131\077\001\002\000\004\054\230" +
    "\001\002\000\022\052\uffc9\056\uffc9\057\uffc9\060\uffc9\106" +
    "\116\107\uffc9\110\uffc9\111\uffc9\001\002\000\112\052\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\073\uffab" +
    "\074\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104" +
    "\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\115\uffab" +
    "\116\uffab\117\uffab\120\uffab\121\uffab\122\uffab\123\uffab\124" +
    "\uffab\125\uffab\126\uffab\001\002\000\004\051\220\001\002" +
    "\000\034\034\uffa0\051\uffa0\065\uffa0\066\uffa0\067\uffa0\071" +
    "\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\127\uffa0\130\uffa0" +
    "\131\uffa0\001\002\000\034\034\uffa2\051\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\071\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2" +
    "\127\uffa2\130\uffa2\131\uffa2\001\002\000\034\034\uff9e\051" +
    "\uff9e\065\uff9e\066\uff9e\067\uff9e\071\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\127\uff9e\130\uff9e\131\uff9e\001\002\000" +
    "\050\052\uffbb\056\uffbb\057\uffbb\060\uffbb\063\uffbb\064\uffbb" +
    "\066\135\067\136\074\uffbb\100\uffbb\101\uffbb\102\uffbb\103" +
    "\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb" +
    "\001\002\000\034\034\050\051\213\065\034\066\052\067" +
    "\044\071\045\073\057\074\072\075\073\076\046\127\100" +
    "\130\066\131\077\001\002\000\060\013\uffe2\014\uffe2\020" +
    "\uffe2\021\uffe2\025\uffe2\026\uffe2\031\uffe2\034\uffe2\045\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\065\uffe2\066\uffe2\067\uffe2\071" +
    "\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\127\uffe2\130\uffe2" +
    "\131\uffe2\001\002\000\034\034\uffa1\051\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\071\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1" +
    "\127\uffa1\130\uffa1\131\uffa1\001\002\000\024\052\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\074\120\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\001\002\000\112\052\uffb1\055\206\056\uffb1\057" +
    "\uffb1\060\uffb1\062\uffb1\063\uffb1\064\uffb1\065\207\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\073\205\074\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\107\uffb1\110\uffb1\111\uffb1\115\uffb1\116\uffb1\117\uffb1\120" +
    "\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125\uffb1\126\uffb1" +
    "\001\002\000\060\013\076\014\011\020\014\021\043\025" +
    "\004\026\006\031\060\034\050\045\067\051\037\053\031" +
    "\054\uffe6\065\034\066\052\067\044\071\045\073\057\074" +
    "\072\075\073\076\046\127\100\130\066\131\077\001\002" +
    "\000\020\052\uffcb\056\uffcb\057\uffcb\060\uffcb\107\114\110" +
    "\uffcb\111\uffcb\001\002\000\034\034\050\051\037\065\034" +
    "\066\052\067\044\071\045\073\057\074\072\075\073\076" +
    "\046\127\100\130\066\131\077\001\002\000\036\034\050" +
    "\051\037\057\200\065\034\066\052\067\044\071\045\073" +
    "\057\074\072\075\073\076\046\127\100\130\066\131\077" +
    "\001\002\000\060\013\uffe5\014\uffe5\020\uffe5\021\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\034\uffe5\045\uffe5\051\uffe5\053\uffe5" +
    "\054\uffe5\065\uffe5\066\uffe5\067\uffe5\071\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\127\uffe5\130\uffe5\131\uffe5\001\002" +
    "\000\056\052\uffb8\056\uffb8\057\uffb8\060\uffb8\063\uffb8\064" +
    "\uffb8\066\uffb8\067\uffb8\070\142\071\140\074\uffb8\077\141" +
    "\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106" +
    "\uffb8\107\uffb8\110\uffb8\111\uffb8\001\002\000\060\013\uffe1" +
    "\014\uffe1\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1\034" +
    "\uffe1\045\uffe1\051\uffe1\053\uffe1\054\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\071\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\127" +
    "\uffe1\130\uffe1\131\uffe1\001\002\000\060\013\uffe3\014\uffe3" +
    "\020\uffe3\021\uffe3\025\uffe3\026\uffe3\031\uffe3\034\uffe3\045" +
    "\uffe3\051\uffe3\053\uffe3\054\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\071\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\127\uffe3\130" +
    "\uffe3\131\uffe3\001\002\000\040\052\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\063\125\064\127\074\uffc3\102\130\103\126\104" +
    "\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\001\002" +
    "\000\112\052\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\073\uffa5\074\uffa5\077\uffa5\100\uffa5\101\uffa5\102" +
    "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5" +
    "\111\uffa5\115\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\122" +
    "\uffa5\123\uffa5\124\uffa5\125\uffa5\126\uffa5\001\002\000\004" +
    "\051\174\001\002\000\104\052\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\062\170\063\uffb5\064\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\074\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103" +
    "\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5" +
    "\115\165\116\161\117\160\120\163\121\166\122\164\123" +
    "\172\124\162\125\157\126\171\001\002\000\004\057\156" +
    "\001\002\000\034\034\uffa3\051\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\071\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\127\uffa3" +
    "\130\uffa3\131\uffa3\001\002\000\034\034\uff9f\051\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\071\uff9f\073\uff9f\074\uff9f\075\uff9f" +
    "\076\uff9f\127\uff9f\130\uff9f\131\uff9f\001\002\000\014\052" +
    "\uffda\056\uffda\057\uffda\060\uffda\111\154\001\002\000\016" +
    "\052\uffcd\056\uffcd\057\uffcd\060\uffcd\110\111\111\uffcd\001" +
    "\002\000\056\013\076\014\011\020\014\021\043\025\004" +
    "\026\006\031\060\034\050\045\067\051\037\053\031\065" +
    "\034\066\052\067\044\071\045\073\057\074\072\075\073" +
    "\076\046\127\100\130\066\131\077\001\002\000\112\052" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\073" +
    "\uffa7\074\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\115" +
    "\uffa7\116\uffa7\117\uffa7\120\uffa7\121\uffa7\122\uffa7\123\uffa7" +
    "\124\uffa7\125\uffa7\126\uffa7\001\002\000\112\052\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\073\uffa6\074" +
    "\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6" +
    "\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\115\uffa6\116" +
    "\uffa6\117\uffa6\120\uffa6\121\uffa6\122\uffa6\123\uffa6\124\uffa6" +
    "\125\uffa6\126\uffa6\001\002\000\006\071\021\131\102\001" +
    "\002\000\012\055\026\057\ufff4\060\ufff4\062\ufff4\001\002" +
    "\000\004\045\104\001\002\000\004\051\105\001\002\000" +
    "\034\034\050\051\037\065\034\066\052\067\044\071\045" +
    "\073\057\074\072\075\073\076\046\127\100\130\066\131" +
    "\077\001\002\000\004\052\107\001\002\000\004\057\110" +
    "\001\002\000\060\013\uffde\014\uffde\020\uffde\021\uffde\025" +
    "\uffde\026\uffde\031\uffde\034\uffde\045\uffde\051\uffde\053\uffde" +
    "\054\uffde\065\uffde\066\uffde\067\uffde\071\uffde\073\uffde\074" +
    "\uffde\075\uffde\076\uffde\127\uffde\130\uffde\131\uffde\001\002" +
    "\000\034\034\050\051\037\065\034\066\052\067\044\071" +
    "\045\073\057\074\072\075\073\076\046\127\100\130\066" +
    "\131\077\001\002\000\056\052\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\063\uffb5\064\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5" +
    "\074\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\001\002" +
    "\000\020\052\uffca\056\uffca\057\uffca\060\uffca\107\114\110" +
    "\uffca\111\uffca\001\002\000\034\034\050\051\037\065\034" +
    "\066\052\067\044\071\045\073\057\074\072\075\073\076" +
    "\046\127\100\130\066\131\077\001\002\000\022\052\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\106\116\107\uffc8\110\uffc8\111" +
    "\uffc8\001\002\000\034\034\050\051\037\065\034\066\052" +
    "\067\044\071\045\073\057\074\072\075\073\076\046\127" +
    "\100\130\066\131\077\001\002\000\024\052\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\074\120\106\uffc6\107\uffc6\110\uffc6\111" +
    "\uffc6\001\002\000\034\034\050\051\037\065\034\066\052" +
    "\067\044\071\045\073\057\074\072\075\073\076\046\127" +
    "\100\130\066\131\077\001\002\000\030\052\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\074\uffc4\104\122\105\123\106\uffc4\107" +
    "\uffc4\110\uffc4\111\uffc4\001\002\000\034\034\050\051\037" +
    "\065\034\066\052\067\044\071\045\073\057\074\072\075" +
    "\073\076\046\127\100\130\066\131\077\001\002\000\034" +
    "\034\050\051\037\065\034\066\052\067\044\071\045\073" +
    "\057\074\072\075\073\076\046\127\100\130\066\131\077" +
    "\001\002\000\040\052\uffc1\056\uffc1\057\uffc1\060\uffc1\063" +
    "\125\064\127\074\uffc1\102\130\103\126\104\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\001\002\000\034\034" +
    "\050\051\037\065\034\066\052\067\044\071\045\073\057" +
    "\074\072\075\073\076\046\127\100\130\066\131\077\001" +
    "\002\000\034\034\050\051\037\065\034\066\052\067\044" +
    "\071\045\073\057\074\072\075\073\076\046\127\100\130" +
    "\066\131\077\001\002\000\034\034\050\051\037\065\034" +
    "\066\052\067\044\071\045\073\057\074\072\075\073\076" +
    "\046\127\100\130\066\131\077\001\002\000\034\034\050" +
    "\051\037\065\034\066\052\067\044\071\045\073\057\074" +
    "\072\075\073\076\046\127\100\130\066\131\077\001\002" +
    "\000\044\052\uffbd\056\uffbd\057\uffbd\060\uffbd\063\uffbd\064" +
    "\uffbd\074\uffbd\100\133\101\132\102\uffbd\103\uffbd\104\uffbd" +
    "\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\001\002\000" +
    "\034\034\050\051\037\065\034\066\052\067\044\071\045" +
    "\073\057\074\072\075\073\076\046\127\100\130\066\131" +
    "\077\001\002\000\034\034\050\051\037\065\034\066\052" +
    "\067\044\071\045\073\057\074\072\075\073\076\046\127" +
    "\100\130\066\131\077\001\002\000\050\052\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\063\uffb9\064\uffb9\066\135\067\136\074" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9" +
    "\106\uffb9\107\uffb9\110\uffb9\111\uffb9\001\002\000\034\034" +
    "\050\051\037\065\034\066\052\067\044\071\045\073\057" +
    "\074\072\075\073\076\046\127\100\130\066\131\077\001" +
    "\002\000\034\034\050\051\037\065\034\066\052\067\044" +
    "\071\045\073\057\074\072\075\073\076\046\127\100\130" +
    "\066\131\077\001\002\000\056\052\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\063\uffb6\064\uffb6\066\uffb6\067\uffb6\070\142\071" +
    "\140\074\uffb6\077\141\100\uffb6\101\uffb6\102\uffb6\103\uffb6" +
    "\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\001" +
    "\002\000\034\034\050\051\037\065\034\066\052\067\044" +
    "\071\045\073\057\074\072\075\073\076\046\127\100\130" +
    "\066\131\077\001\002\000\034\034\050\051\037\065\034" +
    "\066\052\067\044\071\045\073\057\074\072\075\073\076" +
    "\046\127\100\130\066\131\077\001\002\000\034\034\050" +
    "\051\037\065\034\066\052\067\044\071\045\073\057\074" +
    "\072\075\073\076\046\127\100\130\066\131\077\001\002" +
    "\000\056\052\uffb3\056\uffb3\057\uffb3\060\uffb3\063\uffb3\064" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\074\uffb3\077\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\001\002\000\056\052\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\074\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110" +
    "\uffb2\111\uffb2\001\002\000\056\052\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\063\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\074\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\001" +
    "\002\000\056\052\uffb7\056\uffb7\057\uffb7\060\uffb7\063\uffb7" +
    "\064\uffb7\066\uffb7\067\uffb7\070\142\071\140\074\uffb7\077" +
    "\141\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7" +
    "\106\uffb7\107\uffb7\110\uffb7\111\uffb7\001\002\000\050\052" +
    "\uffba\056\uffba\057\uffba\060\uffba\063\uffba\064\uffba\066\135" +
    "\067\136\074\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104" +
    "\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\001\002" +
    "\000\044\052\uffbe\056\uffbe\057\uffbe\060\uffbe\063\uffbe\064" +
    "\uffbe\074\uffbe\100\133\101\132\102\uffbe\103\uffbe\104\uffbe" +
    "\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\001\002\000" +
    "\044\052\uffbc\056\uffbc\057\uffbc\060\uffbc\063\uffbc\064\uffbc" +
    "\074\uffbc\100\133\101\132\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\001\002\000\044" +
    "\052\uffbf\056\uffbf\057\uffbf\060\uffbf\063\uffbf\064\uffbf\074" +
    "\uffbf\100\133\101\132\102\uffbf\103\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\110\uffbf\111\uffbf\001\002\000\040\052" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\063\125\064\127\074\uffc2" +
    "\102\130\103\126\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110" +
    "\uffc2\111\uffc2\001\002\000\034\034\050\051\037\065\034" +
    "\066\052\067\044\071\045\073\057\074\072\075\073\076" +
    "\046\127\100\130\066\131\077\001\002\000\016\052\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\110\111\111\uffcc\001\002\000" +
    "\060\013\uffe4\014\uffe4\020\uffe4\021\uffe4\025\uffe4\026\uffe4" +
    "\031\uffe4\034\uffe4\045\uffe4\051\uffe4\053\uffe4\054\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\071\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\076\uffe4\127\uffe4\130\uffe4\131\uffe4\001\002\000\034\034" +
    "\uffce\051\uffce\065\uffce\066\uffce\067\uffce\071\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\127\uffce\130\uffce\131\uffce\001" +
    "\002\000\034\034\uffd5\051\uffd5\065\uffd5\066\uffd5\067\uffd5" +
    "\071\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\127\uffd5\130" +
    "\uffd5\131\uffd5\001\002\000\034\034\uffd6\051\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\071\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\127\uffd6\130\uffd6\131\uffd6\001\002\000\034\034\uffd0" +
    "\051\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\127\uffd0\130\uffd0\131\uffd0\001\002" +
    "\000\034\034\uffd4\051\uffd4\065\uffd4\066\uffd4\067\uffd4\071" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\127\uffd4\130\uffd4" +
    "\131\uffd4\001\002\000\034\034\uffd1\051\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\071\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\127\uffd1\130\uffd1\131\uffd1\001\002\000\034\034\uffd7\051" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\071\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\127\uffd7\130\uffd7\131\uffd7\001\002\000" +
    "\034\034\uffd3\051\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\127\uffd3\130\uffd3\131" +
    "\uffd3\001\002\000\034\034\050\051\037\065\034\066\052" +
    "\067\044\071\045\073\057\074\072\075\073\076\046\127" +
    "\100\130\066\131\077\001\002\000\034\034\uffd8\051\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\071\uffd8\073\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\127\uffd8\130\uffd8\131\uffd8\001\002\000\034" +
    "\034\uffcf\051\uffcf\065\uffcf\066\uffcf\067\uffcf\071\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\127\uffcf\130\uffcf\131\uffcf" +
    "\001\002\000\034\034\uffd2\051\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\071\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\127\uffd2" +
    "\130\uffd2\131\uffd2\001\002\000\012\052\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\001\002\000\034\034\050\051\037\065\034" +
    "\066\052\067\044\071\045\073\057\074\072\075\073\076" +
    "\046\127\100\130\066\131\077\001\002\000\004\052\176" +
    "\001\002\000\056\013\076\014\011\020\014\021\043\025" +
    "\004\026\006\031\060\034\050\045\067\051\037\053\031" +
    "\065\034\066\052\067\044\071\045\073\057\074\072\075" +
    "\073\076\046\127\100\130\066\131\077\001\002\000\060" +
    "\013\uffdf\014\uffdf\020\uffdf\021\uffdf\025\uffdf\026\uffdf\031" +
    "\uffdf\034\uffdf\045\uffdf\051\uffdf\053\uffdf\054\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\071\uffdf\073\uffdf\074\uffdf\075\uffdf\076" +
    "\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\060\013\uffdc" +
    "\014\uffdc\020\uffdc\021\uffdc\025\uffdc\026\uffdc\031\uffdc\034" +
    "\uffdc\045\uffdc\051\uffdc\053\uffdc\054\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\071\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\127" +
    "\uffdc\130\uffdc\131\uffdc\001\002\000\004\057\202\001\002" +
    "\000\060\013\uffdb\014\uffdb\020\uffdb\021\uffdb\025\uffdb\026" +
    "\uffdb\031\uffdb\034\uffdb\045\uffdb\051\uffdb\053\uffdb\054\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\071\uffdb\073\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\127\uffdb\130\uffdb\131\uffdb\001\002\000\104" +
    "\052\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\074\uffaf\077\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106" +
    "\uffaf\107\uffaf\110\uffaf\111\uffaf\115\uffaf\116\uffaf\117\uffaf" +
    "\120\uffaf\121\uffaf\122\uffaf\123\uffaf\124\uffaf\125\uffaf\126" +
    "\uffaf\001\002\000\004\054\uffe7\001\002\000\112\052\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\073\uffa8" +
    "\074\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\115\uffa8" +
    "\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\123\uffa8\124" +
    "\uffa8\125\uffa8\126\uffa8\001\002\000\034\034\050\051\037" +
    "\065\034\066\052\067\044\071\045\073\057\074\072\075" +
    "\073\076\046\127\100\130\066\131\077\001\002\000\112" +
    "\052\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9" +
    "\073\uffa9\074\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9" +
    "\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9\122\uffa9\123" +
    "\uffa9\124\uffa9\125\uffa9\126\uffa9\001\002\000\004\056\211" +
    "\001\002\000\112\052\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\073\uffaa\074\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa" +
    "\110\uffaa\111\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121" +
    "\uffaa\122\uffaa\123\uffaa\124\uffaa\125\uffaa\126\uffaa\001\002" +
    "\000\104\052\uffad\056\uffad\057\uffad\060\uffad\062\uffad\063" +
    "\uffad\064\uffad\066\uffad\067\uffad\070\uffad\071\uffad\074\uffad" +
    "\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105" +
    "\uffad\106\uffad\107\uffad\110\uffad\111\uffad\115\uffad\116\uffad" +
    "\117\uffad\120\uffad\121\uffad\122\uffad\123\uffad\124\uffad\125" +
    "\uffad\126\uffad\001\002\000\044\014\011\020\014\025\004" +
    "\026\006\034\050\051\037\065\034\066\052\067\044\071" +
    "\045\073\057\074\072\075\073\076\046\127\100\130\066" +
    "\131\077\001\002\000\004\052\217\001\002\000\004\052" +
    "\216\001\002\000\104\052\uffac\056\uffac\057\uffac\060\uffac" +
    "\062\uffac\063\uffac\064\uffac\066\uffac\067\uffac\070\uffac\071" +
    "\uffac\074\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\111\uffac\115" +
    "\uffac\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac\123\uffac" +
    "\124\uffac\125\uffac\126\uffac\001\002\000\112\052\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\073\uffa4\074" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\115\uffa4\116" +
    "\uffa4\117\uffa4\120\uffa4\121\uffa4\122\uffa4\123\uffa4\124\uffa4" +
    "\125\uffa4\126\uffa4\001\002\000\034\034\050\051\037\065" +
    "\034\066\052\067\044\071\045\073\057\074\072\075\073" +
    "\076\046\127\100\130\066\131\077\001\002\000\004\057" +
    "\222\001\002\000\034\034\050\051\037\065\034\066\052" +
    "\067\044\071\045\073\057\074\072\075\073\076\046\127" +
    "\100\130\066\131\077\001\002\000\004\057\224\001\002" +
    "\000\034\034\050\051\037\065\034\066\052\067\044\071" +
    "\045\073\057\074\072\075\073\076\046\127\100\130\066" +
    "\131\077\001\002\000\004\052\226\001\002\000\056\013" +
    "\076\014\011\020\014\021\043\025\004\026\006\031\060" +
    "\034\050\045\067\051\037\053\031\065\034\066\052\067" +
    "\044\071\045\073\057\074\072\075\073\076\046\127\100" +
    "\130\066\131\077\001\002\000\060\013\uffdd\014\uffdd\020" +
    "\uffdd\021\uffdd\025\uffdd\026\uffdd\031\uffdd\034\uffdd\045\uffdd" +
    "\051\uffdd\053\uffdd\054\uffdd\065\uffdd\066\uffdd\067\uffdd\071" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\127\uffdd\130\uffdd" +
    "\131\uffdd\001\002\000\062\002\uffe0\013\uffe0\014\uffe0\020" +
    "\uffe0\021\uffe0\025\uffe0\026\uffe0\031\uffe0\034\uffe0\045\uffe0" +
    "\051\uffe0\053\uffe0\054\uffe0\065\uffe0\066\uffe0\067\uffe0\071" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\127\uffe0\130\uffe0" +
    "\131\uffe0\001\002\000\104\052\uffae\056\uffae\057\uffae\060" +
    "\uffae\062\uffae\063\uffae\064\uffae\066\uffae\067\uffae\070\uffae" +
    "\071\uffae\074\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae" +
    "\115\uffae\116\uffae\117\uffae\120\uffae\121\uffae\122\uffae\123" +
    "\uffae\124\uffae\125\uffae\126\uffae\001\002\000\104\052\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\062\uffb0\063\uffb0\064\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\071\uffb0\074\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107" +
    "\uffb0\110\uffb0\111\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0" +
    "\121\uffb0\122\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0\001" +
    "\002\000\012\055\uffe9\057\uffe9\060\uffe9\062\uffe9\001\002" +
    "\000\004\056\235\001\002\000\012\055\uffea\057\uffea\060" +
    "\uffea\062\uffea\001\002\000\006\056\237\127\240\001\002" +
    "\000\012\055\uffeb\057\uffeb\060\uffeb\062\uffeb\001\002\000" +
    "\004\056\241\001\002\000\012\055\uffec\057\uffec\060\uffec" +
    "\062\uffec\001\002\000\006\071\021\131\102\001\002\000" +
    "\060\013\ufffc\014\ufffc\020\ufffc\021\ufffc\025\ufffc\026\ufffc" +
    "\031\ufffc\034\ufffc\045\ufffc\051\ufffc\053\ufffc\054\ufffc\065" +
    "\ufffc\066\ufffc\067\ufffc\071\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\127\ufffc\130\ufffc\131\ufffc\001\002\000\010\057" +
    "\ufffb\060\ufffb\062\246\001\002\000\006\057\ufffa\060\ufffa" +
    "\001\002\000\034\034\050\051\037\065\034\066\052\067" +
    "\044\071\045\073\057\074\072\075\073\076\046\127\100" +
    "\130\066\131\077\001\002\000\006\057\ufff3\060\ufff3\001" +
    "\002\000\006\071\uffee\131\uffee\001\002\000\012\055\026" +
    "\057\ufff6\060\ufff6\062\ufff6\001\002\000\012\055\236\057" +
    "\ufff7\060\ufff7\062\ufff7\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\006\003\012\004\004\010\011\013" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\021\006\017\007\022\011\016\001\001" +
    "\000\010\004\015\010\011\013\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\031\001" +
    "\001\000\056\004\060\010\100\014\037\015\054\016\063" +
    "\017\050\020\062\021\070\023\073\024\074\025\055\026" +
    "\040\027\052\030\032\031\064\032\035\033\046\034\061" +
    "\035\067\036\053\037\041\040\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\231\036\053\037\041" +
    "\040\034\001\001\000\012\035\230\036\053\037\041\040" +
    "\034\001\001\000\002\001\001\000\040\021\213\023\073" +
    "\024\074\025\055\026\040\027\052\030\032\031\064\032" +
    "\035\033\046\034\061\035\067\036\053\037\041\040\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\035\211\036" +
    "\053\037\041\040\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\004" +
    "\060\010\100\014\203\015\054\016\063\017\050\020\062" +
    "\021\070\023\073\024\074\025\055\026\040\027\052\030" +
    "\032\031\064\032\035\033\046\034\061\035\067\036\053" +
    "\037\041\040\034\001\001\000\002\001\001\000\012\035" +
    "\202\036\053\037\041\040\034\001\001\000\040\021\200" +
    "\023\073\024\074\025\055\026\040\027\052\030\032\031" +
    "\064\032\035\033\046\034\061\035\067\036\053\037\041" +
    "\040\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\060\010\100\015" +
    "\102\016\063\017\050\020\062\021\070\023\073\024\074" +
    "\025\055\026\040\027\052\030\032\031\064\032\035\033" +
    "\046\034\061\035\067\036\053\037\041\040\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\021\006" +
    "\017\007\022\011\016\001\001\000\004\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\021\105\023" +
    "\073\024\074\025\055\026\040\027\052\030\032\031\064" +
    "\032\035\033\046\034\061\035\067\036\053\037\041\040" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\025\112\026\040\027\052\030\032\031" +
    "\064\032\035\033\046\034\061\035\111\036\053\037\041" +
    "\040\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\026\114\027\052\030\032\031\064\032\035\033\046" +
    "\034\061\035\111\036\053\037\041\040\034\001\001\000" +
    "\002\001\001\000\026\027\116\030\032\031\064\032\035" +
    "\033\046\034\061\035\111\036\053\037\041\040\034\001" +
    "\001\000\002\001\001\000\024\030\120\031\064\032\035" +
    "\033\046\034\061\035\111\036\053\037\041\040\034\001" +
    "\001\000\002\001\001\000\022\031\152\032\035\033\046" +
    "\034\061\035\111\036\053\037\041\040\034\001\001\000" +
    "\022\031\123\032\035\033\046\034\061\035\111\036\053" +
    "\037\041\040\034\001\001\000\002\001\001\000\020\032" +
    "\151\033\046\034\061\035\111\036\053\037\041\040\034" +
    "\001\001\000\020\032\150\033\046\034\061\035\111\036" +
    "\053\037\041\040\034\001\001\000\020\032\147\033\046" +
    "\034\061\035\111\036\053\037\041\040\034\001\001\000" +
    "\020\032\130\033\046\034\061\035\111\036\053\037\041" +
    "\040\034\001\001\000\002\001\001\000\016\033\146\034" +
    "\061\035\111\036\053\037\041\040\034\001\001\000\016" +
    "\033\133\034\061\035\111\036\053\037\041\040\034\001" +
    "\001\000\002\001\001\000\014\034\145\035\111\036\053" +
    "\037\041\040\034\001\001\000\014\034\136\035\111\036" +
    "\053\037\041\040\034\001\001\000\002\001\001\000\012" +
    "\035\144\036\053\037\041\040\034\001\001\000\012\035" +
    "\143\036\053\037\041\040\034\001\001\000\012\035\142" +
    "\036\053\037\041\040\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\024\154\025\055\026\040" +
    "\027\052\030\032\031\064\032\035\033\046\034\061\035" +
    "\111\036\053\037\041\040\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\021" +
    "\172\023\073\024\074\025\055\026\040\027\052\030\032" +
    "\031\064\032\035\033\046\034\061\035\067\036\053\037" +
    "\041\040\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\021\174\023" +
    "\073\024\074\025\055\026\040\027\052\030\032\031\064" +
    "\032\035\033\046\034\061\035\067\036\053\037\041\040" +
    "\034\001\001\000\002\001\001\000\054\004\060\010\100" +
    "\015\176\016\063\017\050\020\062\021\070\023\073\024" +
    "\074\025\055\026\040\027\052\030\032\031\064\032\035" +
    "\033\046\034\061\035\067\036\053\037\041\040\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\021\207\023\073\024\074\025\055" +
    "\026\040\027\052\030\032\031\064\032\035\033\046\034" +
    "\061\035\067\036\053\037\041\040\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\010\214\021\213\023\073\024\074\025\055" +
    "\026\040\027\052\030\032\031\064\032\035\033\046\034" +
    "\061\035\067\036\053\037\041\040\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\021\220\023\073\024\074\025\055\026\040" +
    "\027\052\030\032\031\064\032\035\033\046\034\061\035" +
    "\067\036\053\037\041\040\034\001\001\000\002\001\001" +
    "\000\040\021\222\023\073\024\074\025\055\026\040\027" +
    "\052\030\032\031\064\032\035\033\046\034\061\035\067" +
    "\036\053\037\041\040\034\001\001\000\002\001\001\000" +
    "\040\021\224\023\073\024\074\025\055\026\040\027\052" +
    "\030\032\031\064\032\035\033\046\034\061\035\067\036" +
    "\053\037\041\040\034\001\001\000\002\001\001\000\054" +
    "\004\060\010\100\015\226\016\063\017\050\020\062\021" +
    "\070\023\073\024\074\025\055\026\040\027\052\030\032" +
    "\031\064\032\035\033\046\034\061\035\067\036\053\037" +
    "\041\040\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\243\007\244\011\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\021\246\023\073\024" +
    "\074\025\055\026\040\027\052\030\032\031\064\032\035" +
    "\033\046\034\061\035\067\036\053\037\041\040\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\251" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= alldecs function 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // alldecs ::= alldecs declstmt 
            {
              String RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d1 + d2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alldecs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // alldecs ::= declstmt 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alldecs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declstmt ::= type declist SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + d + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declstmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declist ::= declist COMMA decl 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l + ", " + d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declist ::= declist COMMA decinit 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l + ", " + d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declist ::= decl 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declist ::= decinit 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= stars IDENTIFIER arraydims 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s + id + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= stars IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s + id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= IDENTIFIER arraydims 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decinit ::= decl ASSIGN expr 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " = " + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decinit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT = "double "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= LONG 
            {
              String RESULT =null;
		 RESULT = "long "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = "int "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stars ::= stars STAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stars ::= STAR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arraydims ::= arraydims LBRACK INTEGER_LITERAL RBRACK 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a + "[" + i + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraydims",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arraydims ::= arraydims LBRACK RBRACK 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = a + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraydims",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arraydims ::= LBRACK INTEGER_LITERAL RBRACK 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "[" + i + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraydims",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arraydims ::= LBRACK RBRACK 
            {
              String RESULT =null;
		 RESULT = "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraydims",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function ::= type IDENTIFIER LPAREN RPAREN blkstmt 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t + id + "()" + b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtlist ::= statement stmtlist 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s + l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtlist ::= statement 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= declstmt 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= expr SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= blkstmt 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= iterstmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= retstmt 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // blkstmt ::= LBRACE stmtlist RBRACE 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "{\n" + l + "}\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blkstmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // iterstmt ::= WHILE LPAREN expr RPAREN statement 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "while (" + e + ") " + s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterstmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iterstmt ::= DO statement WHILE LPAREN expr RPAREN SEMICOLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "do\n" + s + "while (" + e + ");\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterstmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iterstmt ::= FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN statement 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "for (" + e1 + "; " + e2 + "; " + e3 + ") " + s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterstmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // retstmt ::= RETURN SEMICOLON 
            {
              String RESULT =null;
		 RESULT = "return;\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retstmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // retstmt ::= RETURN expr SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "return " + e + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retstmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= logorexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= uexpr assignop expr 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u + o + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignop ::= ASSIGN 
            {
              String RESULT =null;
		 RESULT = " = "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignop ::= STAREQ 
            {
              String RESULT =null;
		 RESULT = " *= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignop ::= DIVEQ 
            {
              String RESULT =null;
		 RESULT = " /= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignop ::= REMEQ 
            {
              String RESULT =null;
		 RESULT = " %= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignop ::= PLUSEQ 
            {
              String RESULT =null;
		 RESULT = " += "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignop ::= MINUSEQ 
            {
              String RESULT =null;
		 RESULT = " -= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignop ::= BITSHIFTREQ 
            {
              String RESULT =null;
		 RESULT = " >>= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignop ::= BITSHIFTLEQ 
            {
              String RESULT =null;
		 RESULT = " <<= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignop ::= ANDEQ 
            {
              String RESULT =null;
		 RESULT = " &= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignop ::= OREQ 
            {
              String RESULT =null;
		 RESULT = " |= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignop ::= XOREQ 
            {
              String RESULT =null;
		 RESULT = " ^= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logorexpr ::= logandexp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logorexpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logorexpr ::= logorexpr OR logandexp 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o + " || " + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logorexpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logandexp ::= incorexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logandexp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logandexp ::= logandexp AND incorexpr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a + " && " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logandexp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // incorexpr ::= xorexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incorexpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // incorexpr ::= incorexpr BITOR xorexpr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + " | " + x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incorexpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // xorexpr ::= andexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xorexpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // xorexpr ::= xorexpr XOR andexpr 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x + " ^ " + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xorexpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // andexpr ::= eqexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andexpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // andexpr ::= andexpr BITAND eqexpr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a + " & " + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andexpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // eqexpr ::= relexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eqexpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // eqexpr ::= eqexpr EQ relexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " == " + r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eqexpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // eqexpr ::= eqexpr NEQ relexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " != " + r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eqexpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relexpr ::= shiftexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relexpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relexpr ::= relexpr LT shiftexpr 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r + " < " + s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relexpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relexpr ::= relexpr GT shiftexpr 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r + " > " + s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relexpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relexpr ::= relexpr LTEQ shiftexpr 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r + " <= " + s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relexpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relexpr ::= relexpr GTEQ shiftexpr 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r + " >= " + s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relexpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // shiftexpr ::= addexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // shiftexpr ::= shiftexpr BITSHIFTR addexpr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s + " >> " + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // shiftexpr ::= shiftexpr BITSHIFTL addexpr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s + " << " + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // addexpr ::= multexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // addexpr ::= addexpr PLUS multexpr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a + " + " + m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // addexpr ::= addexpr MINUS multexpr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a + " - " + m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multexpr ::= uexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multexpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // multexpr ::= multexpr STAR uexpr 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m + " * " + c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multexpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // multexpr ::= multexpr DIV uexpr 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m + " / " + c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multexpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // multexpr ::= multexpr REMAINDER uexpr 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m + " % " + c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multexpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // uexpr ::= postexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uexpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // uexpr ::= PLUSPLUS uexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++" + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uexpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // uexpr ::= MINUSMINUS uexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "--" + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uexpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // uexpr ::= uop uexpr 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uexpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // uexpr ::= SIZEOF uexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "sizeof " + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uexpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // uexpr ::= SIZEOF LPAREN type RPAREN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "sizeof(" + t + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uexpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // postexpr ::= primexpr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postexpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // postexpr ::= postexpr LBRACK expr RBRACK 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p + "[" + e + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postexpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // postexpr ::= postexpr PLUSPLUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e + "++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postexpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // postexpr ::= postexpr MINUSMINUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e + "--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postexpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // primexpr ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primexpr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // primexpr ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (i instanceof Long) ? i.toString() + "L" : i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primexpr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // primexpr ::= FLOATING_POINT_LITERAL 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number f = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (f instanceof Float) ? f.toString() + "F" : f.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primexpr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // primexpr ::= LPAREN expr RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(" + e + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primexpr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // uop ::= BITAND 
            {
              String RESULT =null;
		 RESULT = "&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // uop ::= STAR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // uop ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // uop ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // uop ::= BITNOT 
            {
              String RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // uop ::= NOT 
            {
              String RESULT =null;
		 RESULT = "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
