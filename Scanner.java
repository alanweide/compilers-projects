/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>simpleC.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\101\1\1\1\1\22\0\1\1\1\73\3\0"+
    "\1\74\1\71\1\0\1\53\1\54\1\70\1\66\1\62\1\14\1\12"+
    "\1\67\1\2\7\7\2\4\1\100\1\61\1\64\1\63\1\65\1\77"+
    "\1\0\1\6\1\50\1\51\1\6\1\13\1\16\2\5\1\52\2\5"+
    "\1\10\3\5\1\15\4\5\1\11\2\5\1\3\2\5\1\57\1\0"+
    "\1\60\1\75\1\47\1\0\1\17\1\23\1\27\1\34\1\25\1\35"+
    "\1\41\1\31\1\33\1\5\1\26\1\36\1\37\1\32\1\22\1\45"+
    "\1\5\1\24\1\30\1\21\1\20\1\46\1\43\1\40\1\44\1\42"+
    "\1\55\1\76\1\56\1\72\6\0\1\101\u1fa2\0\1\101\1\101\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\4\1\5"+
    "\1\6\20\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\3\0\1\35\1\36\1\37\1\40\1\0\2\41\1\0"+
    "\1\42\1\43\1\44\20\4\1\45\1\46\12\4\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\0\1\70\1\71\1\72\1\0\1\41\1\40\1\0"+
    "\1\73\24\4\1\74\2\4\1\41\1\75\11\4\1\76"+
    "\1\77\1\100\1\101\1\40\1\0\1\102\1\40\1\103"+
    "\7\4\1\104\1\105\1\4\1\106\2\4\1\107\12\4"+
    "\1\110\1\111\1\4\1\112\4\4\1\113\1\40\1\0"+
    "\1\4\1\114\1\4\1\115\5\4\1\116\2\4\1\117"+
    "\6\4\1\120\1\121\1\4\1\122\4\4\1\123\2\4"+
    "\1\124\1\4\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\5\4\1\134\3\4\1\135\3\4\1\136\1\137"+
    "\1\140\1\141\1\142\1\143\2\4\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\102\0\u07fe\0\u0840\0\u0882\0\u08c4\0\102\0\102\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u098a"+
    "\0\u014a\0\u0b16\0\102\0\102\0\102\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\306\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\102\0\102\0\u124e\0\102\0\u1290\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\u12d2\0\u1314\0\u1356\0\u1398\0\102\0\u13da\0\102"+
    "\0\u141c\0\u145e\0\102\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\306"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\306\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\102\0\102\0\u1ce0"+
    "\0\u1d22\0\u1d64\0\u1da6\0\102\0\u1de8\0\306\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\306\0\306\0\u1ff8"+
    "\0\306\0\u203a\0\u207c\0\306\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\306\0\306"+
    "\0\u2352\0\306\0\u2394\0\u23d6\0\u2418\0\u245a\0\102\0\u249c"+
    "\0\u249c\0\u24de\0\306\0\u2520\0\306\0\u2562\0\u25a4\0\u25e6"+
    "\0\u2628\0\u266a\0\306\0\u26ac\0\u26ee\0\306\0\u2730\0\u2772"+
    "\0\u27b4\0\u27f6\0\u2838\0\u287a\0\306\0\306\0\u28bc\0\306"+
    "\0\u28fe\0\u2940\0\u2982\0\u29c4\0\306\0\u2a06\0\u2a48\0\306"+
    "\0\u2a8a\0\306\0\306\0\306\0\306\0\306\0\306\0\306"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\306\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\306\0\u2cdc\0\u2d1e\0\u2d60\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\u2da2\0\u2de4\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\6"+
    "\2\5\1\10\1\7\1\11\1\5\1\7\1\12\1\13"+
    "\1\14\1\5\1\15\1\16\1\17\1\5\1\20\1\21"+
    "\2\5\1\22\1\23\1\24\1\25\2\5\1\26\1\5"+
    "\1\27\2\5\1\30\1\31\2\7\1\5\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\105\0\1\60\1\61\1\60"+
    "\1\0\1\62\1\63\1\64\1\65\1\66\1\67\2\0"+
    "\1\70\1\62\1\65\2\0\1\62\1\0\1\67\1\0"+
    "\1\62\4\0\1\62\1\70\1\64\1\0\1\61\7\0"+
    "\2\62\32\0\10\5\1\0\1\5\1\0\36\5\31\0"+
    "\1\6\1\0\1\6\1\0\1\62\1\6\1\64\1\65"+
    "\1\66\1\67\2\0\1\70\1\62\1\65\2\0\1\62"+
    "\1\0\1\67\1\0\1\62\4\0\1\62\1\70\1\64"+
    "\11\0\2\62\32\0\1\7\1\5\1\7\1\5\2\7"+
    "\2\5\1\0\1\7\1\0\1\5\1\71\1\7\3\5"+
    "\1\7\1\5\1\7\1\5\1\7\4\5\1\7\1\71"+
    "\12\5\2\7\1\5\31\0\1\66\1\0\1\66\2\0"+
    "\1\66\2\0\1\72\103\0\1\73\46\0\1\74\1\0"+
    "\1\75\16\0\1\7\1\5\1\7\1\5\2\7\2\5"+
    "\1\0\1\7\1\0\1\5\1\71\1\7\1\76\2\5"+
    "\1\7\1\5\1\7\1\5\1\7\4\5\1\7\1\71"+
    "\12\5\2\7\1\5\31\0\10\5\1\0\1\5\1\0"+
    "\15\5\1\77\20\5\31\0\10\5\1\0\1\5\1\0"+
    "\27\5\1\100\6\5\31\0\1\7\1\5\1\7\1\5"+
    "\2\7\2\5\1\0\1\7\1\0\1\5\1\71\1\7"+
    "\3\5\1\7\1\101\1\7\1\5\1\7\4\5\1\7"+
    "\1\71\12\5\2\7\1\5\31\0\10\5\1\0\1\5"+
    "\1\0\10\5\1\102\25\5\31\0\1\7\1\5\1\7"+
    "\1\5\2\7\2\5\1\0\1\7\1\0\1\5\1\71"+
    "\1\7\3\5\1\7\1\5\1\7\1\5\1\7\2\5"+
    "\1\103\1\5\1\7\1\71\1\104\1\5\1\105\7\5"+
    "\2\7\1\5\31\0\1\7\1\5\1\7\1\5\2\7"+
    "\2\5\1\0\1\7\1\0\1\5\1\71\1\106\2\5"+
    "\1\107\1\7\1\5\1\7\1\5\1\7\1\5\1\110"+
    "\2\5\1\7\1\71\12\5\2\7\1\5\31\0\10\5"+
    "\1\0\1\5\1\0\4\5\1\111\7\5\1\112\1\5"+
    "\1\113\7\5\1\114\7\5\31\0\10\5\1\0\1\5"+
    "\1\0\15\5\1\115\2\5\1\116\15\5\31\0\1\7"+
    "\1\5\1\7\1\5\2\7\2\5\1\0\1\7\1\0"+
    "\1\5\1\71\1\7\2\5\1\117\1\7\1\5\1\120"+
    "\1\5\1\7\4\5\1\7\1\71\12\5\2\7\1\5"+
    "\31\0\1\7\1\5\1\7\1\5\2\7\2\5\1\0"+
    "\1\7\1\0\1\5\1\71\1\7\2\5\1\121\1\7"+
    "\1\5\1\7\1\5\1\7\4\5\1\7\1\71\1\122"+
    "\11\5\2\7\1\5\31\0\10\5\1\0\1\5\1\0"+
    "\5\5\1\123\30\5\31\0\10\5\1\0\1\5\1\0"+
    "\5\5\1\124\30\5\31\0\10\5\1\0\1\5\1\0"+
    "\14\5\1\125\21\5\31\0\10\5\1\0\1\5\1\0"+
    "\5\5\1\126\30\5\31\0\10\5\1\0\1\5\1\0"+
    "\33\5\1\127\1\130\1\131\112\0\1\132\101\0\1\133"+
    "\1\134\100\0\1\135\1\0\1\136\77\0\1\137\2\0"+
    "\1\140\76\0\1\141\101\0\1\142\101\0\1\143\5\0"+
    "\1\144\73\0\1\145\101\0\1\146\101\0\1\147\101\0"+
    "\1\150\12\0\1\151\5\0\1\60\1\0\1\60\1\0"+
    "\1\62\1\60\2\0\1\66\1\67\2\0\1\70\1\62"+
    "\3\0\1\62\1\0\1\67\1\0\1\62\4\0\1\62"+
    "\1\70\12\0\2\62\32\0\1\152\1\0\1\152\1\0"+
    "\2\152\2\0\1\153\1\152\2\0\2\152\3\0\1\152"+
    "\1\0\1\152\1\0\1\152\4\0\2\152\12\0\2\152"+
    "\32\0\1\62\1\0\1\62\1\0\2\62\3\0\1\62"+
    "\2\0\1\70\1\62\3\0\1\62\1\0\1\62\1\0"+
    "\1\62\4\0\1\62\1\70\12\0\2\62\32\0\1\63"+
    "\1\0\1\60\1\0\1\62\1\63\1\154\1\155\1\66"+
    "\1\67\2\0\1\70\1\62\1\155\2\0\1\62\1\0"+
    "\1\67\1\0\1\62\4\0\1\62\1\70\1\154\11\0"+
    "\2\62\41\0\1\156\6\0\1\156\71\0\1\156\25\0"+
    "\1\156\45\0\1\66\1\0\1\66\2\0\1\66\3\0"+
    "\1\157\2\0\1\160\6\0\1\157\7\0\1\160\46\0"+
    "\1\161\1\0\1\161\1\0\1\62\1\161\3\0\1\62"+
    "\1\162\1\0\1\70\1\62\3\0\1\62\1\0\1\62"+
    "\1\0\1\62\4\0\1\62\1\70\12\0\2\62\14\0"+
    "\1\162\25\0\1\163\71\0\10\5\1\0\1\5\1\0"+
    "\4\5\1\164\31\5\31\0\10\5\1\0\1\5\1\0"+
    "\13\5\1\165\2\5\1\166\17\5\31\0\10\5\1\0"+
    "\1\5\1\0\30\5\1\167\5\5\31\0\10\5\1\0"+
    "\1\5\1\0\10\5\1\170\25\5\31\0\10\5\1\0"+
    "\1\5\1\0\4\5\1\171\6\5\1\172\10\5\1\173"+
    "\11\5\31\0\10\5\1\0\1\5\1\0\3\5\1\174"+
    "\32\5\31\0\10\5\1\0\1\5\1\0\13\5\1\175"+
    "\22\5\31\0\10\5\1\0\1\5\1\0\4\5\1\176"+
    "\31\5\31\0\1\7\1\5\1\7\1\5\2\7\2\5"+
    "\1\0\1\7\1\0\1\5\1\71\1\7\3\5\1\7"+
    "\1\5\1\7\1\5\1\7\1\177\3\5\1\7\1\71"+
    "\12\5\2\7\1\5\31\0\10\5\1\0\1\5\1\0"+
    "\15\5\1\200\20\5\31\0\10\5\1\0\1\5\1\0"+
    "\2\5\1\201\33\5\31\0\10\5\1\0\1\5\1\0"+
    "\2\5\1\202\4\5\1\203\26\5\31\0\10\5\1\0"+
    "\1\5\1\0\5\5\1\204\30\5\31\0\10\5\1\0"+
    "\1\5\1\0\24\5\1\205\1\206\10\5\31\0\10\5"+
    "\1\0\1\5\1\0\16\5\1\207\17\5\31\0\10\5"+
    "\1\0\1\5\1\0\4\5\1\210\14\5\1\211\14\5"+
    "\31\0\10\5\1\0\1\5\1\0\3\5\1\212\32\5"+
    "\31\0\1\7\1\5\1\7\1\5\2\7\2\5\1\0"+
    "\1\7\1\0\1\5\1\71\1\7\3\5\1\7\1\5"+
    "\1\7\1\5\1\7\4\5\1\7\1\213\12\5\2\7"+
    "\1\5\31\0\10\5\1\0\1\5\1\0\7\5\1\214"+
    "\26\5\31\0\10\5\1\0\1\5\1\0\5\5\1\215"+
    "\30\5\31\0\10\5\1\0\1\5\1\0\15\5\1\216"+
    "\20\5\31\0\10\5\1\0\1\5\1\0\4\5\1\217"+
    "\31\5\31\0\10\5\1\0\1\5\1\0\16\5\1\220"+
    "\17\5\31\0\10\5\1\0\1\5\1\0\16\5\1\221"+
    "\2\5\1\222\14\5\31\0\10\5\1\0\1\5\1\0"+
    "\5\5\1\223\30\5\31\0\10\5\1\0\1\5\1\0"+
    "\5\5\1\224\30\5\31\0\10\5\1\0\1\5\1\0"+
    "\22\5\1\225\13\5\112\0\1\226\101\0\1\227\20\0"+
    "\1\152\1\0\1\152\1\0\2\152\1\230\1\231\1\232"+
    "\1\152\1\0\1\233\2\152\1\231\2\0\1\152\1\0"+
    "\1\152\1\0\1\152\4\0\2\152\1\230\6\0\1\233"+
    "\2\0\2\152\32\0\1\232\1\0\1\232\1\0\2\232"+
    "\3\0\1\232\2\0\2\232\3\0\1\232\1\0\1\232"+
    "\1\0\1\232\4\0\2\232\12\0\2\232\41\0\1\234"+
    "\6\0\1\234\71\0\1\234\25\0\1\234\45\0\1\235"+
    "\1\0\1\235\2\0\1\235\4\0\1\162\51\0\1\162"+
    "\15\0\1\161\1\0\1\161\1\0\1\62\1\161\3\0"+
    "\1\62\2\0\1\70\1\62\3\0\1\62\1\0\1\62"+
    "\1\0\1\62\4\0\1\62\1\70\12\0\2\62\32\0"+
    "\1\235\1\0\1\235\2\0\1\235\74\0\10\5\1\0"+
    "\1\5\1\0\5\5\1\236\30\5\31\0\10\5\1\0"+
    "\1\5\1\0\16\5\1\237\17\5\31\0\10\5\1\0"+
    "\1\5\1\0\5\5\1\240\30\5\31\0\10\5\1\0"+
    "\1\5\1\0\10\5\1\241\25\5\31\0\10\5\1\0"+
    "\1\5\1\0\2\5\1\242\33\5\31\0\10\5\1\0"+
    "\1\5\1\0\3\5\1\243\32\5\31\0\10\5\1\0"+
    "\1\5\1\0\4\5\1\244\31\5\31\0\10\5\1\0"+
    "\1\5\1\0\16\5\1\245\17\5\31\0\10\5\1\0"+
    "\1\5\1\0\22\5\1\246\13\5\31\0\10\5\1\0"+
    "\1\5\1\0\10\5\1\247\25\5\31\0\10\5\1\0"+
    "\1\5\1\0\10\5\1\250\25\5\31\0\10\5\1\0"+
    "\1\5\1\0\10\5\1\251\25\5\31\0\10\5\1\0"+
    "\1\5\1\0\4\5\1\252\6\5\1\253\22\5\31\0"+
    "\10\5\1\0\1\5\1\0\7\5\1\254\26\5\31\0"+
    "\10\5\1\0\1\5\1\0\4\5\1\255\31\5\31\0"+
    "\10\5\1\0\1\5\1\0\3\5\1\256\32\5\31\0"+
    "\10\5\1\0\1\5\1\0\7\5\1\257\26\5\31\0"+
    "\10\5\1\0\1\5\1\0\15\5\1\260\20\5\31\0"+
    "\10\5\1\0\1\5\1\0\10\5\1\261\25\5\31\0"+
    "\10\5\1\0\1\5\1\0\4\5\1\262\31\5\31\0"+
    "\10\5\1\0\1\5\1\0\16\5\1\263\17\5\31\0"+
    "\10\5\1\0\1\5\1\0\6\5\1\264\27\5\31\0"+
    "\1\7\1\5\1\7\1\5\2\7\2\5\1\0\1\7"+
    "\1\0\1\5\1\71\1\265\3\5\1\7\1\5\1\7"+
    "\1\5\1\7\4\5\1\7\1\71\12\5\2\7\1\5"+
    "\31\0\10\5\1\0\1\5\1\0\2\5\1\266\33\5"+
    "\31\0\10\5\1\0\1\5\1\0\24\5\1\267\11\5"+
    "\31\0\10\5\1\0\1\5\1\0\5\5\1\270\30\5"+
    "\31\0\10\5\1\0\1\5\1\0\21\5\1\271\14\5"+
    "\31\0\10\5\1\0\1\5\1\0\17\5\1\272\16\5"+
    "\31\0\10\5\1\0\1\5\1\0\2\5\1\273\33\5"+
    "\31\0\10\5\1\0\1\5\1\0\5\5\1\274\30\5"+
    "\31\0\10\5\1\0\1\5\1\0\22\5\1\275\13\5"+
    "\31\0\10\5\1\0\1\5\1\0\2\5\1\276\33\5"+
    "\40\0\1\277\6\0\1\277\71\0\1\277\25\0\1\277"+
    "\45\0\1\232\1\0\1\232\1\0\2\232\3\0\1\232"+
    "\1\0\1\233\2\232\3\0\1\232\1\0\1\232\1\0"+
    "\1\232\4\0\2\232\7\0\1\233\2\0\2\232\32\0"+
    "\1\300\1\0\1\300\1\0\2\300\3\0\1\300\1\301"+
    "\1\0\2\300\3\0\1\300\1\0\1\300\1\0\1\300"+
    "\4\0\2\300\12\0\2\300\14\0\1\301\15\0\1\235"+
    "\1\0\1\235\2\0\1\235\6\0\1\160\16\0\1\160"+
    "\46\0\10\5\1\0\1\5\1\0\24\5\1\302\11\5"+
    "\31\0\10\5\1\0\1\5\1\0\15\5\1\303\20\5"+
    "\31\0\10\5\1\0\1\5\1\0\17\5\1\304\16\5"+
    "\31\0\10\5\1\0\1\5\1\0\11\5\1\305\24\5"+
    "\31\0\10\5\1\0\1\5\1\0\7\5\1\306\26\5"+
    "\31\0\10\5\1\0\1\5\1\0\7\5\1\307\26\5"+
    "\31\0\10\5\1\0\1\5\1\0\13\5\1\310\22\5"+
    "\31\0\10\5\1\0\1\5\1\0\7\5\1\311\26\5"+
    "\31\0\10\5\1\0\1\5\1\0\16\5\1\312\17\5"+
    "\31\0\10\5\1\0\1\5\1\0\4\5\1\313\31\5"+
    "\31\0\10\5\1\0\1\5\1\0\16\5\1\314\17\5"+
    "\31\0\10\5\1\0\1\5\1\0\12\5\1\315\23\5"+
    "\31\0\10\5\1\0\1\5\1\0\4\5\1\316\31\5"+
    "\31\0\10\5\1\0\1\5\1\0\10\5\1\317\25\5"+
    "\31\0\10\5\1\0\1\5\1\0\5\5\1\320\30\5"+
    "\31\0\10\5\1\0\1\5\1\0\12\5\1\321\23\5"+
    "\31\0\10\5\1\0\1\5\1\0\15\5\1\322\20\5"+
    "\31\0\10\5\1\0\1\5\1\0\21\5\1\323\14\5"+
    "\31\0\1\7\1\5\1\7\1\5\2\7\2\5\1\0"+
    "\1\7\1\0\1\5\1\71\1\7\1\324\2\5\1\7"+
    "\1\5\1\7\1\5\1\7\4\5\1\7\1\71\12\5"+
    "\2\7\1\5\31\0\10\5\1\0\1\5\1\0\4\5"+
    "\1\325\31\5\31\0\10\5\1\0\1\5\1\0\10\5"+
    "\1\326\25\5\31\0\10\5\1\0\1\5\1\0\4\5"+
    "\1\327\31\5\31\0\10\5\1\0\1\5\1\0\21\5"+
    "\1\330\14\5\31\0\10\5\1\0\1\5\1\0\30\5"+
    "\1\331\5\5\31\0\10\5\1\0\1\5\1\0\24\5"+
    "\1\332\11\5\31\0\1\300\1\0\1\300\1\0\2\300"+
    "\3\0\1\300\2\0\2\300\3\0\1\300\1\0\1\300"+
    "\1\0\1\300\4\0\2\300\12\0\2\300\32\0\10\5"+
    "\1\0\1\5\1\0\15\5\1\333\20\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\334\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\15\5\1\335\20\5\31\0\10\5"+
    "\1\0\1\5\1\0\16\5\1\336\17\5\31\0\10\5"+
    "\1\0\1\5\1\0\4\5\1\337\31\5\31\0\10\5"+
    "\1\0\1\5\1\0\15\5\1\340\20\5\31\0\10\5"+
    "\1\0\1\5\1\0\15\5\1\341\20\5\31\0\10\5"+
    "\1\0\1\5\1\0\12\5\1\342\23\5\31\0\10\5"+
    "\1\0\1\5\1\0\4\5\1\343\31\5\31\0\10\5"+
    "\1\0\1\5\1\0\17\5\1\344\16\5\31\0\10\5"+
    "\1\0\1\5\1\0\20\5\1\345\15\5\31\0\10\5"+
    "\1\0\1\5\1\0\14\5\1\346\21\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\347\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\350\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\21\5\1\351\14\5\31\0\10\5"+
    "\1\0\1\5\1\0\16\5\1\352\17\5\31\0\10\5"+
    "\1\0\1\5\1\0\21\5\1\353\14\5\31\0\10\5"+
    "\1\0\1\5\1\0\16\5\1\354\17\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\355\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\20\5\1\356\15\5\31\0\10\5"+
    "\1\0\1\5\1\0\12\5\1\357\23\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\360\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\3\5\1\361\32\5\31\0\10\5"+
    "\1\0\1\5\1\0\4\5\1\362\31\5\31\0\10\5"+
    "\1\0\1\5\1\0\21\5\1\363\14\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\364\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\15\5\1\365\20\5\31\0\10\5"+
    "\1\0\1\5\1\0\17\5\1\366\16\5\31\0\10\5"+
    "\1\0\1\5\1\0\4\5\1\367\31\5\31\0\10\5"+
    "\1\0\1\5\1\0\7\5\1\370\26\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\371\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\10\5\1\372\25\5\31\0\10\5"+
    "\1\0\1\5\1\0\23\5\1\373\12\5\31\0\10\5"+
    "\1\0\1\5\1\0\2\5\1\374\33\5\31\0\10\5"+
    "\1\0\1\5\1\0\7\5\1\375\26\5\31\0\10\5"+
    "\1\0\1\5\1\0\27\5\1\376\6\5\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11814];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\26\1\10\11\7\1\1\11\4\1\2\11"+
    "\3\0\4\1\1\0\2\1\1\0\3\11\34\1\2\11"+
    "\1\1\1\11\1\1\13\11\1\1\1\0\2\1\1\11"+
    "\1\0\1\11\1\1\1\0\1\11\42\1\2\11\3\1"+
    "\1\0\1\11\42\1\1\11\1\1\1\0\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new MySymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new MySymbol(type, yyline+1, yycolumn+1, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+ "\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
          case 101: break;
          case 2: 
            { /* ignore */
            }
          case 102: break;
          case 3: 
            { return symbol(sym.INTEGER_LITERAL, Integer.valueOf(yytext(), 10));
            }
          case 103: break;
          case 4: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 104: break;
          case 5: 
            { return symbol(DOT);
            }
          case 105: break;
          case 6: 
            { return symbol(MINUS);
            }
          case 106: break;
          case 7: 
            { return symbol(LPAREN);
            }
          case 107: break;
          case 8: 
            { return symbol(RPAREN);
            }
          case 108: break;
          case 9: 
            { return symbol(LBRACE);
            }
          case 109: break;
          case 10: 
            { return symbol(RBRACE);
            }
          case 110: break;
          case 11: 
            { return symbol(LBRACK);
            }
          case 111: break;
          case 12: 
            { return symbol(RBRACK);
            }
          case 112: break;
          case 13: 
            { return symbol(SEMICOLON);
            }
          case 113: break;
          case 14: 
            { return symbol(COMMA);
            }
          case 114: break;
          case 15: 
            { return symbol(ASSIGN);
            }
          case 115: break;
          case 16: 
            { return symbol(LT);
            }
          case 116: break;
          case 17: 
            { return symbol(GT);
            }
          case 117: break;
          case 18: 
            { return symbol(PLUS);
            }
          case 118: break;
          case 19: 
            { return symbol(DIV);
            }
          case 119: break;
          case 20: 
            { return symbol(STAR);
            }
          case 120: break;
          case 21: 
            { return symbol(BITAND);
            }
          case 121: break;
          case 22: 
            { return symbol(BITNOT);
            }
          case 122: break;
          case 23: 
            { return symbol(NOT);
            }
          case 123: break;
          case 24: 
            { return symbol(REMAINDER);
            }
          case 124: break;
          case 25: 
            { return symbol(XOR);
            }
          case 125: break;
          case 26: 
            { return symbol(BITOR);
            }
          case 126: break;
          case 27: 
            { return symbol(QUESTION);
            }
          case 127: break;
          case 28: 
            { return symbol(COLON);
            }
          case 128: break;
          case 29: 
            { return symbol(sym.INTEGER_LITERAL, Integer.valueOf(yytext(), 8));
            }
          case 129: break;
          case 30: 
            { String integerPart = yytext().substring(0, yylength() - 1);
      return symbol(sym.INTEGER_LITERAL, Long.valueOf(integerPart, 10));
            }
          case 130: break;
          case 31: 
            { String integerPart = yytext().substring(0, yylength() - 1);
      return symbol(sym.INTEGER_LITERAL, Integer.valueOf(integerPart, 10));
            }
          case 131: break;
          case 32: 
            { return symbol(FLOATING_POINT_LITERAL, Double.parseDouble(yytext()));
            }
          case 132: break;
          case 33: 
            { return symbol(FLOATING_POINT_LITERAL, Float.parseFloat(yytext()));
            }
          case 133: break;
          case 34: 
            { return symbol(MINUSMINUS);
            }
          case 134: break;
          case 35: 
            { return symbol(MINUSEQ);
            }
          case 135: break;
          case 36: 
            { return symbol(ARROW);
            }
          case 136: break;
          case 37: 
            { return symbol(IF);
            }
          case 137: break;
          case 38: 
            { return symbol(DO);
            }
          case 138: break;
          case 39: 
            { return symbol(EQ);
            }
          case 139: break;
          case 40: 
            { return symbol(LTEQ);
            }
          case 140: break;
          case 41: 
            { return symbol(BITSHIFTL);
            }
          case 141: break;
          case 42: 
            { return symbol(GTEQ);
            }
          case 142: break;
          case 43: 
            { return symbol(BITSHIFTR);
            }
          case 143: break;
          case 44: 
            { return symbol(PLUSEQ);
            }
          case 144: break;
          case 45: 
            { return symbol(PLUSPLUS);
            }
          case 145: break;
          case 46: 
            { return symbol(DIVEQ);
            }
          case 146: break;
          case 47: 
            { return symbol(STAREQ);
            }
          case 147: break;
          case 48: 
            { return symbol(ANDEQ);
            }
          case 148: break;
          case 49: 
            { return symbol(AND);
            }
          case 149: break;
          case 50: 
            { return symbol(NEQ);
            }
          case 150: break;
          case 51: 
            { return symbol(REMEQ);
            }
          case 151: break;
          case 52: 
            { return symbol(XOREQ);
            }
          case 152: break;
          case 53: 
            { return symbol(OREQ);
            }
          case 153: break;
          case 54: 
            { return symbol(OR);
            }
          case 154: break;
          case 55: 
            { return symbol(sym.INTEGER_LITERAL, Integer.valueOf(yytext().substring(2), 16));
            }
          case 155: break;
          case 56: 
            { String integerPart = yytext().substring(0, yylength() - 1);
      return symbol(sym.INTEGER_LITERAL, Long.valueOf(integerPart, 8));
            }
          case 156: break;
          case 57: 
            { String integerPart = yytext().substring(0, yylength() - 1); 
      return symbol(sym.INTEGER_LITERAL, Integer.valueOf(integerPart, 8));
            }
          case 157: break;
          case 58: 
            { String integerPart = yytext().substring(0, yylength() - 2);
      return symbol(sym.INTEGER_LITERAL, Long.valueOf(integerPart, 10));
            }
          case 158: break;
          case 59: 
            { return symbol(ELLIPSIS);
            }
          case 159: break;
          case 60: 
            { return symbol(INT);
            }
          case 160: break;
          case 61: 
            { return symbol(FOR);
            }
          case 161: break;
          case 62: 
            { return symbol(BITSHIFTLEQ);
            }
          case 162: break;
          case 63: 
            { return symbol(BITSHIFTREQ);
            }
          case 163: break;
          case 64: 
            { String integerPart = yytext().substring(2, yylength() - 1);
      return symbol(sym.INTEGER_LITERAL, Long.valueOf(integerPart, 16));
            }
          case 164: break;
          case 65: 
            { String integerPart = yytext().substring(2, yylength() - 1);
      return symbol(sym.INTEGER_LITERAL, Integer.valueOf(integerPart, 16));
            }
          case 165: break;
          case 66: 
            { String integerPart = yytext().substring(0, yylength() - 2); 
      return symbol(sym.INTEGER_LITERAL, Long.valueOf(integerPart, 8));
            }
          case 166: break;
          case 67: 
            { return symbol(AUTO);
            }
          case 167: break;
          case 68: 
            { return symbol(ENUM);
            }
          case 168: break;
          case 69: 
            { return symbol(ELSE);
            }
          case 169: break;
          case 70: 
            { return symbol(CASE);
            }
          case 170: break;
          case 71: 
            { return symbol(CHAR);
            }
          case 171: break;
          case 72: 
            { return symbol(LONG);
            }
          case 172: break;
          case 73: 
            { return symbol(GOTO);
            }
          case 173: break;
          case 74: 
            { return symbol(VOID);
            }
          case 174: break;
          case 75: 
            { String integerPart = yytext().substring(2, yylength() - 2); 
      return symbol(sym.INTEGER_LITERAL, Long.valueOf(integerPart, 16));
            }
          case 175: break;
          case 76: 
            { return symbol(UNION);
            }
          case 176: break;
          case 77: 
            { return symbol(BREAK);
            }
          case 177: break;
          case 78: 
            { return symbol(CONST);
            }
          case 178: break;
          case 79: 
            { return symbol(SHORT);
            }
          case 179: break;
          case 80: 
            { return symbol(FLOAT);
            }
          case 180: break;
          case 81: 
            { return symbol(WHILE);
            }
          case 181: break;
          case 82: 
            { return symbol(BOOL);
            }
          case 182: break;
          case 83: 
            { return symbol(RETURN);
            }
          case 183: break;
          case 84: 
            { return symbol(EXTERN);
            }
          case 184: break;
          case 85: 
            { return symbol(STATIC);
            }
          case 185: break;
          case 86: 
            { return symbol(STRUCT);
            }
          case 186: break;
          case 87: 
            { return symbol(SIGNED);
            }
          case 187: break;
          case 88: 
            { return symbol(SIZEOF);
            }
          case 188: break;
          case 89: 
            { return symbol(SWITCH);
            }
          case 189: break;
          case 90: 
            { return symbol(INLINE);
            }
          case 190: break;
          case 91: 
            { return symbol(DOUBLE);
            }
          case 191: break;
          case 92: 
            { return symbol(TYPEDEF);
            }
          case 192: break;
          case 93: 
            { return symbol(DEFAULT);
            }
          case 193: break;
          case 94: 
            { return symbol(UNSIGNED);
            }
          case 194: break;
          case 95: 
            { return symbol(RESTRICT);
            }
          case 195: break;
          case 96: 
            { return symbol(REGISTER);
            }
          case 196: break;
          case 97: 
            { return symbol(CONTINUE);
            }
          case 197: break;
          case 98: 
            { return symbol(VOLATILE);
            }
          case 198: break;
          case 99: 
            { return symbol(COMPLEX);
            }
          case 199: break;
          case 100: 
            { return symbol(IMAGINARY);
            }
          case 200: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
